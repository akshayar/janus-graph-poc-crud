/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'arawa3' at '1/12/16 6:34 AM' with Gradle 2.6
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.6/userguide/tutorial_java_projects.html
 */

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.3.1.RELEASE")
    }
}

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'spring-boot'
apply plugin: 'application'

jar {
    baseName = 'janus-graph-crud'
    version =  '0.1.0'
}

repositories {
    mavenCentral()
}

version = '1.0'
sourceCompatibility = 1.8
targetCompatibility = 1.8
def environment = hasProperty('env') ? env : 'dev'
println "Environment is set to $environment"

// In this section you declare the dependencies for your production and test code
dependencies {
	def titandbVersion = '1.0.0'
	def tinkerpopVersion = '3.0.1-incubating'
    compile("org.springframework.boot:spring-boot-starter-jersey") {
        exclude module: "spring-boot-starter-tomcat"
        exclude module: "spring-boot-starter-logging"
    }
    compile("org.springframework.boot:spring-boot-starter-jetty")
    compile("org.springframework.boot:spring-boot-starter-test")
    compile("net.sf.supercsv:super-csv:2.3.1")
    compile("com.thinkaurelius.titan:titan-core:${titandbVersion}")
    compile("com.thinkaurelius.titan:titan-berkeleyje:${titandbVersion}")
    compile("com.thinkaurelius.titan:titan-es:${titandbVersion}")
    compile("org.apache.tinkerpop:gremlin-server:${tinkerpopVersion}")
    compile("log4j:log4j")
    compile("com.google.code.gson:gson")
    testCompile("junit:junit")
}

startScripts {
    doLast {
        def winScriptFile  = file getWindowsScript()
        def winFileText = winScriptFile.text
        winFileText = winFileText.replaceAll('set CLASSPATH=.*', 'rem original CLASSPATH declaration replaced by:\nset CLASSPATH=%APP_HOME%\\\\lib\\\\\\*')
        winScriptFile.text = winFileText
    }
}

springBoot {
  mainClass = "com.aksh.poc.EmailSurvLoadApplication"
  executable = true
}



distributions {
    
    main {
        contents {
            if (environment== 'dev') {
                applicationDistribution.from('src/main/resources/environments/dev/')
				{
				  into "config"
				}
            }else if (environment== 'qa'){
            	from { 'src/main/resources/environments/qa/' }
            }else{
            	from { 'src/main/resources/' }
            }
            
        }
    }
}



